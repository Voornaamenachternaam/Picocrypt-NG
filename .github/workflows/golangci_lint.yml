name: golangci-lint
on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: write
  pull-requests: write
  checks: write

jobs:
  linter:
    name: golangci-lint
    runs-on: ubuntu-latest
    env:
      CGO_ENABLED: 0

    steps:
      # 1Ô∏è‚É£ Checkout the repository
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # 2Ô∏è‚É£ Detect Go version from /src/go.mod
      - name: Detect Go version
        id: goversion
        run: |
          VERSION=$(grep '^go ' src/go.mod | awk '{print $2}')
          if [ -z "$VERSION" ]; then
            echo "Go version not found in src/go.mod" >&2
            exit 1
          fi
          echo "Detected Go version: $VERSION"
          echo "go-version=$VERSION" >> $GITHUB_OUTPUT

      # 3Ô∏è‚É£ Setup Go using the detected version
      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ steps.goversion.outputs.go-version }}

      # 4Ô∏è‚É£ Check and get dependencies
      - name: Check and get dependencies
        working-directory: ./src
        run: |
          go mod tidy
          git diff --exit-code go.mod || echo "go.mod updated"

      # 5Ô∏è‚É£ Run golangci-lint with autofix
      - name: Run golangci-lint (with autofix)
        id: lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          working-directory: ./src
          args: --fix --timeout=5m
        continue-on-error: true

      # 6Ô∏è‚É£ Generate lint summary report (for PR + logs)
      - name: Generate lint summary
        id: summary
        working-directory: ./src
        run: |
          echo "Generating lint summary..."
          set +e
          golangci-lint run --out-format=tab --timeout=5m > ../lint-summary.txt 2>&1
          ISSUES_TOTAL=$(grep -c '^\S' ../lint-summary.txt || true)
          FIXED=$(git diff --name-only | grep '\.go$' | wc -l | tr -d ' ')
          echo "issues_total=$ISSUES_TOTAL" >> $GITHUB_OUTPUT
          echo "fixed=$FIXED" >> $GITHUB_OUTPUT
          set -e

      # 7Ô∏è‚É£ Check for autofix changes
      - name: Check for changes after lint
        id: changes
        run: |
          if [[ -n "$(git status --porcelain src)" ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Detected code changes from golangci-lint autofix."
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No autofix changes detected."
          fi

      # 8Ô∏è‚É£ Create Pull Request if fixes were applied
      - name: Create Pull Request for autofixes
        if: steps.changes.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: lint-fixes
          commit-message: "chore: apply golangci-lint autofixes"
          title: "chore: apply golangci-lint autofixes"
          body: |
            This pull request contains automatic code fixes generated by **golangci-lint**.

            **Summary**
            - ‚úÖ Fixes applied: ${{ steps.summary.outputs.fixed }}
            - ‚ö†Ô∏è Remaining issues: ${{ steps.summary.outputs.issues_total }}

            All lint results are attached as workflow artifacts.
          base: main
          add-paths: |
            src/**/*.go

      # 9Ô∏è‚É£ Post lint summary as a PR comment (for visibility)
      - name: Post lint summary comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v5.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            üßπ **golangci-lint report**
            - Fixes applied: ${{ steps.summary.outputs.fixed }}
            - Remaining issues: ${{ steps.summary.outputs.issues_total }}
            Full report attached as artifact.

      # üîü Run Go tests (won‚Äôt fail workflow)
      - name: Run Tests
        working-directory: ./src
        continue-on-error: true
        run: |
          go test -v -cover ./... | tee ../test-log.txt || true

      # 11Ô∏è‚É£ Build (won‚Äôt fail workflow)
      - name: Build
        working-directory: ./src
        continue-on-error: true
        run: |
          go build -v -ldflags "-s -w" -trimpath | tee ../build-log.txt || true

      # 12Ô∏è‚É£ Upload all logs as artifacts
      - name: Upload logs
        uses: actions/upload-artifact@v4.6.2
        with:
          name: golangci-lint-logs
          path: |
            lint-summary.txt
            test-log.txt
            build-log.txt
 
