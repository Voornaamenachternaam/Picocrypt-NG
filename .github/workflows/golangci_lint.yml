name: golangci-lint
on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: write
  pull-requests: write
  checks: write

env:
  SRC_DIR: src
  LINT_TIMEOUT: 5m
  GOFLAGS: "-mod=mod"
  CGO_ENABLED: 0
  GOLANGCI_ACTION_REF: v2.5.0
  GOLANGCI_LINTER_VERSION: v2.5.0

jobs:
  linter:
    name: golangci-lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Ensure /src exists and contains go.mod
        id: locate
        run: |
          if [ -f "${{ env.SRC_DIR }}/go.mod" ]; then
            echo "path=${{ env.SRC_DIR }}" >> $GITHUB_OUTPUT
          else
            echo "No go.mod found in ${SRC_DIR}" >&2
            exit 1
          fi

      - name: Detect Go version from /src/go.mod
        id: goversion
        run: |
          MODPATH="${{ steps.locate.outputs.path }}"
          VERSION=$(awk '/^go /{print $2; exit}' "$MODPATH/go.mod" || true)
          if [ -z "$VERSION" ]; then
            echo "go-version=stable" >> $GITHUB_OUTPUT
          else
            echo "go-version=$VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ steps.goversion.outputs.go-version }}

      - name: Ensure git user for automated commits
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Prune and download modules
        working-directory: ${{ steps.locate.outputs.path }}
        run: |
          set -e
          go env
          go mod tidy

      - name: Run golangci-lint action with autofix
        uses: golangci/golangci-lint-action@v8.0.0
        with:
          version: ${{ env.GOLANGCI_LINTER_VERSION }}
          args: --fix --timeout=${{ env.LINT_TIMEOUT }} ./...
          working-directory: ${{ steps.locate.outputs.path }}
        continue-on-error: true

      - name: Generate lint summary
        id: summary
        working-directory: ${{ steps.locate.outputs.path }}
        run: |
          set +e
          export PATH="$(go env GOPATH 2>/dev/null || echo $HOME/go)/bin:$PATH"
          golangci-lint run --out-format=tab --timeout=${{ env.LINT_TIMEOUT }} ./... > ../lint-summary.txt 2>&1 || true
          ISSUES_TOTAL=$(awk 'NF{count++} END{print count+0}' ../lint-summary.txt || echo 0)
          FIXED=$(git --no-pager diff --name-only | grep '\.go$' | wc -l | tr -d ' ' || echo 0)
          echo "issues_total=$ISSUES_TOTAL" >> $GITHUB_OUTPUT
          echo "fixed=$FIXED" >> $GITHUB_OUTPUT
          set -e

      - name: Detect repository changes after autofix
        id: changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request for autofixes
        if: steps.changes.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          token: ${{ secrets.GH2_TOKEN }}
          title: apply golangci-lint autofixes
          commit-message: apply golangci-lint autofixes
          branch: lint-fixes/${{ github.sha }}
          body: |
            This pull request contains automatic code fixes generated by golangci-lint.

            Summary
            - Fixes applied: ${{ steps.summary.outputs.fixed }}
            - Remaining issues: ${{ steps.summary.outputs.issues_total }}
          base: main
          add-paths: |
            ${{ steps.locate.outputs.path }}/**/*.go
          labels: |
            automated
            lint

      - name: Comment lint summary on PR
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v5
        with:
          token: ${{ secrets.GH2_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            golangci-lint report
            - Fixes applied: ${{ steps.summary.outputs.fixed }}
            - Remaining issues: ${{ steps.summary.outputs.issues_total }}
            Attached: lint-summary.txt

      - name: Run tests (non-blocking)
        working-directory: ${{ steps.locate.outputs.path }}
        continue-on-error: true
        run: |
          set -o pipefail
          go test -v -cover ./... 2>&1 | tee ../test-log.txt || true

      - name: Build (non-blocking)
        working-directory: ${{ steps.locate.outputs.path }}
        continue-on-error: true
        run: |
          set -e
          go build -v -ldflags "-s -w" -trimpath ./... 2>&1 | tee ../build-log.txt || true

      - name: Upload logs and lint report
        uses: actions/upload-artifact@v5
        with:
          name: golangci-lint-logs
          path: |
            lint-summary.txt
            test-log.txt
            build-log.txt
 
