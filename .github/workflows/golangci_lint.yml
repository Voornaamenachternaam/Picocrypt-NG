name: golangci-lint
on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: write
  pull-requests: write
  checks: write

jobs:
  linter:
    name: golangci-lint
    runs-on: ubuntu-latest
    env:
      CGO_ENABLED: 0

    steps:
      # 1. Checkout code
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0  # required for PR creation

      # 2. Read Go version from /src/go.mod
      - name: Extract Go version
        id: goversion
        run: |
          VERSION=$(grep '^go ' src/go.mod | awk '{print $2}')
          if [ -z "$VERSION" ]; then
            echo "Error: Could not find Go version in src/go.mod" >&2
            exit 1
          fi
          echo "go-version=$VERSION" >> $GITHUB_OUTPUT
          echo "Detected Go version: $VERSION"

      # 3. Setup Go with version from go.mod
      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ steps.goversion.outputs.go-version }}

      # 4. Prepare dependencies
      - name: Check and get dependencies
        working-directory: ./src
        run: |
          go mod tidy
          git diff --exit-code go.mod || echo "go.mod updated"

      # 5. Install plugin (optional example from original)
      - name: Install plugins
        working-directory: ${{ runner.temp }}
        run: |
          git clone https://github.com/golangci/example-plugin-linter.git
          cd example-plugin-linter
          go build -o '${{ github.workspace }}/.plugins/example.so' -buildmode=plugin plugin/example.go
        env:
          CGO_ENABLED: 1

      # 6. Run golangci-lint with autofix â€” tolerate typecheck failures
      - name: Run golangci-lint with autofix
        id: lint_fix
        working-directory: ./src
        run: |
          echo "Installing golangci-lint..."
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

          echo "Running golangci-lint with --fix..."
          set +e
          golangci-lint run --fix --timeout=5m
          EXIT_CODE=$?
          set -e

          echo "golangci-lint exit code: $EXIT_CODE"
          git status --short

          if [[ -n "$(git status --porcelain)" ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

          # Never fail due to lint/typecheck errors
          exit 0

      # 7. Create PR if any fixes applied
      - name: Create Pull Request for autofixes
        if: steps.lint_fix.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: lint-fixes
          commit-message: "chore: apply golangci-lint auto-fixes"
          title: "chore: apply golangci-lint auto-fixes"
          body: |
            This pull request contains automatic code fixes generated by **golangci-lint**.
            These were applied using `golangci-lint run --fix` in the `/src` directory.
          base: main
          add-paths: |
            src/**/*.go

      # 8. Run golangci-lint for PR report
      - name: Run golangci-lint for report
        id: lint_report
        working-directory: ./src
        run: |
          echo "Generating lint report for PR..."
          set +e
          golangci-lint run --out-format=github-actions --timeout=5m > ../lint-report.txt 2>&1
          LINT_EXIT=$?
          set -e
          echo "Lint report exit code: $LINT_EXIT"
          exit 0

      # 9. Comment lint report on PR
      - name: Post lint report as PR comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v5.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body-file: lint-report.txt

      # 10. Run tests (do not fail the workflow)
      - name: Test
        working-directory: ./src
        continue-on-error: true
        run: |
          echo "Running tests..."
          go test -v -cover ./... || echo "Tests failed but continuing."

      # 11. Build (do not fail the workflow)
      - name: Build
        working-directory: ./src
        continue-on-error: true
        run: |
          echo "Building binary..."
          go build -v -ldflags "-s -w" -trimpath || echo "Build failed but continuing."
 
