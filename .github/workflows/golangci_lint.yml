name: golangci-lint

on:
  push:
    branches:
      - main
  pull_request:

permissions:
  contents: write
  pull-requests: write
  checks: write

jobs:
  linter:
    name: golangci-lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        go-version: [stable]
        os: [ubuntu-latest]
    env:
      CGO_ENABLED: 0

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0  # required for PR creation

      - uses: actions/setup-go@v6
        with:
          go-version: ${{ matrix.go-version }}

      - name: Check and get dependencies
        working-directory: ./src
        run: |
          go mod tidy
          git diff --exit-code go.mod || echo "go.mod updated"

      - name: Install plugins
        working-directory: ${{ runner.temp }}
        run: |
          git clone https://github.com/golangci/example-plugin-linter.git
          cd example-plugin-linter
          go build -o '${{ github.workspace }}/.plugins/example.so' -buildmode=plugin plugin/example.go
        env:
          CGO_ENABLED: 1

      # -------------------------------------------------------
      # Step 1: Run golangci-lint with autofix
      # -------------------------------------------------------
      - name: Run golangci-lint with autofix
        id: lint_fix
        working-directory: ./src
        run: |
          echo "Installing golangci-lint..."
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest

          echo "Running golangci-lint with --fix..."
          set +e
          golangci-lint run --fix --timeout=5m
          EXIT_CODE=$?
          set -e

          echo "Lint exit code: $EXIT_CODE"
          git status --short

          if [[ -n "$(git status --porcelain)" ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi

          # Never fail â€” continue regardless of lint errors
          exit 0

      # -------------------------------------------------------
      # Step 2: Create Pull Request if autofixes were made
      # -------------------------------------------------------
      - name: Create Pull Request for autofixes
        if: steps.lint_fix.outputs.changes == 'true'
        uses: peter-evans/create-pull-request@v7.0.8
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: lint-fixes
          commit-message: "chore: apply golangci-lint auto-fixes"
          title: "chore: apply golangci-lint auto-fixes"
          body: |
            This pull request contains automatic code fixes generated by **golangci-lint**.
            These were applied using `golangci-lint run --fix` in the `/src` directory.
          base: main
          add-paths: |
            src/**/*.go

      # -------------------------------------------------------
      # Step 3: Run golangci-lint again for reporting only
      # -------------------------------------------------------
      - name: Run golangci-lint for report
        id: lint_report
        working-directory: ./src
        run: |
          echo "Generating lint report for PR..."
          set +e
          golangci-lint run --out-format=github-actions --timeout=5m > ../lint-report.txt 2>&1
          LINT_EXIT=$?
          set -e
          echo "Lint report exit code: $LINT_EXIT"
          exit 0

      # -------------------------------------------------------
      # Step 4: Comment the lint report on the PR (if any)
      # -------------------------------------------------------
      - name: Post lint report as PR comment
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v5.0.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body-file: lint-report.txt

      # -------------------------------------------------------
      # Step 5: Run tests and build
      # -------------------------------------------------------
      - name: Test
        working-directory: ./src
        run: go test -v -cover ./...

      - name: Build
        working-directory: ./src
        run: go build -v -ldflags "-s -w" -trimpath
